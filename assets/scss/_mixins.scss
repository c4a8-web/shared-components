@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);

  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);

  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin link-hover {
  position: relative;
  display: inline-block;

  &:hover,
  &:active,
  &:focus {
    font-weight: bold;
  }

  &::after {
    display: block;
    content: attr(data-title);
    font-weight: bold;
    height: 0;
    width: auto;
    overflow: hidden;
    visibility: hidden;
    margin-left: 0;
    transition: none;
  }
}

@mixin link-active {
  position: relative;

  &.active {
    color: inherit;

    &::before {
      background-color: var(--color-secondary);
      content: '';
      height: 8px;
      left: 50%;
      position: absolute;
      top: 57%;
      transform: translateX(-50%);
      width: calc(100% - (#{$header-nav-link-padding-x} * 2) + 8px);
      z-index: -1;
    }
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-top: calc((#{$height} / #{$width}) * 100%);
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin text-highlight {
  background-position-x: 1em;
  background-position-y: 0.6em;
  background-attachment: initial;
  background-origin: initial;
  background-clip: initial;
  background-color: initial;
  background-image: linear-gradient(to bottom, var(--color-secondary) 0%, var(--color-secondary) 100%);
  background-repeat: repeat-x;
}

@function get-container-width($name, $with-padding: true) {
  $width: map-get($container-widths, $name);

  @if ($with-padding) {
    @return calc(#{$width} - (2 * #{$header-floating-inner-padding-x}));
  } @else {
    @return $width;
  }
}

@function get-container-max-width($name) {
  $width: map-get($container-max-widths, $name);

  @return $width;
}

@mixin safari {
  @media not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) {
      @content;
    }
  }
}

@function shared-assets($url) {
  @return url('#{$url}');
}

@function assets($url) {
  @if ($shared-components) {
    @return shared-assets($url);
  } @else {
    @return static-assets($url);
  }
}

@function spacing($size, $negative: false) {
  $value: $size * 0.25;

  $prefix: '';

  @if $negative {
    $prefix: '-';
  }

  @return #{$prefix}#{$value}rem;
}

@function fa-content($fa-var) {
  // prettier-ignore
  @return unquote("\"#{ $fa-var }\"");
}

@mixin icon($name, $font: '', $weight: 300, $after: true) {
  $selector: 'before';

  @if ($after) {
    $selector: 'after';
  }

  $icon: map-get($icons, $name);

  $icon-font: $icon-font-free;

  @if ($font == 'brand') {
    $icon-font: $icon-font-brand;
  }

  &::#{$selector} {
    font-family: $icon-font;
    font-style: normal;
    font-variant: normal;
    font-weight: $weight;
    -webkit-font-smoothing: antialiased;
    line-height: 1;
    text-rendering: auto;
    content: fa-content($icon);

    @content;
  }
}

@mixin underline($color, $selector: null) {
  @if ($selector) {
  } @else {
    $selector: '&';
  }

  #{$selector} {
    text-decoration: none;
    background-image: linear-gradient($color, $color);
    background-repeat: no-repeat;
    background-position: bottom left;
    background-size: 0% 3px;
    transition: background-size 0.4s ease-in-out;
  }

  &:hover {
    #{$selector} {
      background-size: 100% 3px;
    }
  }
}

@function get-full-column-width($container, $columns, $with-padding: false) {
  $container-width: get-container-width($container, $with-padding);
  $percentage: calc(100 / #{$grid-columns} * #{$columns} / 100);

  @return calc(((100vw - #{$container-width}) / 2) + (#{$container-width} * #{$percentage}));
}

@function to-string($list, $separator: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $separator, true)};
    } @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$separator}, $result#{$e});
    }
  }

  @return $result;
}

@mixin shadow($size: 'medium', $x-offset: 0) {
  @if ($size == 'medium') {
    box-shadow: #{$x-offset} 0 15px rgba(0, 0, 0, 0.45);
  } @else if ($size == 'light') {
    box-shadow: #{$x-offset} 0 10px rgba(0, 0, 0, 0.25);
  } @else if ($size == 'medium-light') {
    box-shadow: #{$x-offset} 0 7px rgba(0, 0, 0, 0.25);
  } @else if ($size == 'super-light') {
    box-shadow: #{$x-offset} 0 5px rgba(0, 0, 0, 0.1);
  }
}

@mixin is-invisible {
  visibility: collapse;
  opacity: 0;
  height: 0;
  overflow: hidden;
  margin: 0 !important;
  padding: 0 !important;
  border-width: 0;
  pointer-events: none;
}

@mixin vue-loading {
  display: none;
}

@mixin img-to-color($color: #000, $opacity: 1) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;
  $a: $opacity;
  $lightness: lightness($color);
  $svg-filter-id: 'img-to-color';

  filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);
  filter: url('data:image/svg+xml;utf8,\
    <svg xmlns="http://www.w3.org/2000/svg">\
      <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
        <feColorMatrix type="matrix" values="\
          0 0 0 0 #{$r}\
          0 0 0 0 #{$g}\
          0 0 0 0 #{$b}\
          0 0 0 #{$a} 0\
        "/>\
      </filter>\
    </svg>\
    ##{$svg-filter-id}');
}

@mixin light-text-shadow {
  text-shadow: 0 0 14px var(--color-white);
}

@mixin hover-scale($scale-factor: 2, $scale-duration: 1.2, $scale-delay: 0, $on-img: 'false', $drop-shadow: 'false') {
  $scale-factor: 1 + ($scale-factor/10);
  $scale-duration: #{$scale-duration}s;

  @if ($drop-shadow != 'false') {
    @include shadow($drop-shadow);
  }

  @if ($on-img != 'false') {
    img {
      transform: scale($scale-factor);
      transition: transform $scale-duration;
      transition-delay: $scale-delay;
    }
  } @else {
    transform: scale($scale-factor);
    transition: transform $scale-duration;
    transition-delay: $scale-delay;
  }
}
